/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * @flow
 */

import React, {Component} from 'react';
import {
    AppRegistry,
    StyleSheet,
    Text,
    View,
    TextInput
} from 'react-native';

import {
    createStore,
    combineReducers,
} from 'redux';

import {Provider, connect} from 'react-redux';

let nextTodoId = 0;
const addTodo = (text) => {
    return {
        type: 'ADD_TODO',
        id: nextTodoId++,
        text,
    };
};

const toggleTodo = (id) => {
    return {
        type: 'TOGGLE_TODO',
        id,
    };
};

const setVisibiltyFilter = (filter) => {
    return {
        type: 'SET_VISIBILITY_FILTER',
        filter,
    }
};

const todo = (state, action) => {
    switch (action.type) {
        case 'ADD_TODO':
            return {
                id: action.id,
                text: action.text,
                completed: false,
            };
        case 'TOGGLE_TODO':
            if (state.id !== action.id) {
                return state;
            }
            return {
                ...state,
                completed: !state.completed,
            };
        default:
            return state;
    }
};

const todos = (state = [], action) => {
    switch (action.type) {
        case 'ADD_TODO':
            return [
                ...state,
                todo(undefined, action),
            ];
        case 'TOGGLE_TODO':
            return state.map(t => todo(t, action));
        default:
            return state;
    }
};

const visibilityFilter = (state = 'SHOW_ALL', action) => {
    switch (action.type) {
        case 'SET_VISIBILITY_FILTER':
            return action.filter;
        default:
            return state;
    }
};


const getVisibleTodos = (todos, filter) => {
    switch (filter) {
        case 'SHOW_ALL':
            return todos;
        case 'SHOW_COMPLETED':
            return todos.filter(t => t.completed);
        case 'SHOW_ACTIVE':
            return todos.filter(t => !t.completed);
        default:
            return todos;
    }
};

let AddTodo = ({dispatch}) => {
    let tText = '';
    return (<View style={{marginTop: 100, flexDirection: 'row', alignItems: 'stretch', marginLeft: 10}}>
        <TextInput
            style={{backgroundColor: '#999900', width: 200, height: 30, paddingLeft: 5}}
            onChangeText={text => {
                tText = text;
            }}
        />
        <Text
            style={{backgroundColor: '#009900', marginLeft: 10, textAlign: 'center', padding: 5}}
            onPress={() => {
                dispatch(addTodo(tText));
            }}
        >Add Todo</Text>
    </View>);

};
AddTodo = connect()(AddTodo);

const Todo = ({completed, onClick, text}) => (
    <Text
        style={{marginTop: 10, textDecorationLine: completed ? 'line-through' : 'none'}}
        key={todo.id}
        onPress={onClick}
    >
        {text}
    </Text>
);

const TodoList = ({onTodoClick, todos}) => (
    <View style={{marginLeft: 10}}>
        {
            todos.map(todo =>
                <Todo
                    onClick={() => onTodoClick(todo.id)}
                    key={todo.id}
                    {...todo}
                />
            )
        }
    </View>
);

const VisibleTodoList = connect((state) => {
    return {
        todos: getVisibleTodos(state.todos, state.visibilityFilter)
    };
}, (dispatch) => {
    return {
        onTodoClick: (id) => {
            dispatch(toggleTodo(id))
        }
    }
})(TodoList);

const Link = ({children, onClick}) => {
    return (
        <Text
            style={{marginRight: 10}}
            onPress={onClick}>{children}</Text>
    );
};

const FilterLink = connect(null, (dispatch, props)=> {
    return {
        onClick: () => dispatch(setVisibiltyFilter(props.filter))
    }
})(Link);

const Footer = () => (
    <View style={{marginTop: 10, marginLeft: 10, flexDirection: 'row'}}>
        <FilterLink
            filter={'SHOW_ALL'}
        >
            ALL
        </FilterLink>
        <FilterLink
            filter={'SHOW_ACTIVE'}
        >
            Active
        </FilterLink>
        <FilterLink
            filter={'SHOW_COMPLETED'}
        >
            Completed
        </FilterLink>
    </View>

);

class TodoApp extends Component {

    render() {
        return (
            <Provider store={createStore(combineReducers({todos: todos, visibilityFilter: visibilityFilter}))}>
                <View>
                    <AddTodo />
                    <VisibleTodoList />
                    <Footer />
                </View>
            </Provider>

        );
    }
}


AppRegistry.registerComponent('LearnRedux', () => TodoApp);
